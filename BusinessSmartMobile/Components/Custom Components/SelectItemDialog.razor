@inject MudBlazor.IDialogService DialogService
@inject OrderService OrderService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject AuthService _authService
@using Microsoft.AspNetCore.Components.Web
@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}
@if (_error)
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}

<MudDialog MaxWidth="MaxWidth.False" FullWidth="true" Class="mud-dialog-fullscreen">
    <TitleContent>Ürün Seç</TitleContent>
    <DialogContent>
        <div style="height: 90vh; display: flex; flex-direction: column;">
            <div style="position: sticky; top: 0; z-index: 100; background: white; padding-bottom: 16px; border-bottom: 1px solid #e0e0e0; margin-bottom: 16px;">
                <MudTextField Label="Ara..." @bind-Value="searchTerm" OnKeyUp="HandleKeyDown" Adornment="Adornment.Start" AdornmentIcon="mdi-magnify" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" FullWidth="true" OnClick="ClosePopup">
                    Kaydet
                </MudButton>
            </div>

            <div style="flex: 1; overflow-y: auto;">
                <MudGrid Style="overflow-x: hidden;" Justify="Justify.FlexStart">
                    @foreach (var stck in FilteredStock)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Style="cursor:pointer; height: 100%; min-height: 320px;"
                                     Class="mb-4 d-flex flex-column justify-between"
                                     @onclick="() => AddStock(stck)">

                                <MudCardContent Class="d-flex flex-column justify-between" Style="height:100%;">

                                    <!-- Stok Kodu -->
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary"
                                             Class="text-center mb-1" Style="font-size: 0.85rem;">
                                        <b>Stok Kodu:</b> @stck.sKodu
                                    </MudText>
                                    <MudTooltip Text="@stck.sAciklama">
                                        <MudText Typo="Typo.h6" Class="text-center mb-2 px-2"
                                                 Style="word-break: break-word; min-height: 70px; max-height: 70px; overflow: hidden; font-size: 1rem;">
                                            @((stck.sAciklama?.Length > 60) ? stck.sAciklama.Substring(0, 60) + "..." : stck.sAciklama)
                                        </MudText>
                                    </MudTooltip>
                                    @* <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="false" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                                        @foreach (var resim in GetResimler(stck))
                                        {
                                            <MudCarouselItem Transition="transition">
                                                <div class="d-flex" style="height:100%">
                                                    <img src="@resim" alt="Stok Resmi" style="width:100%; height:100%; object-fit:cover;" />
                                                </div>
                                            </MudCarouselItem>
                                        }
                                    </MudCarousel> *@
                                    <div class="d-flex justify-content-center gap-5 px-3 mb-2">
                                        <MudText Typo="Typo.body2"><b>Miktar:</b> @stck.lMevcut</MudText>
                                        <MudText Typo="Typo.body2"><b>Koli İçi:</b> @stck.nBirimCarpan</MudText>
                                    </div>
                                    <div class="text-center mt-auto mb-1">
                                        @if (stck.lMevcut <= 0)
                                        {
                                            <MudChip Color="Color.Error" Variant="Variant.Filled" Class="mb-1" Size="Size.Small">
                                                Stok Yok
                                            </MudChip>
                                        }

                                        <MudText Typo="Typo.body1"
                                                 Color="@(stck.lFiyat1 <= 0 ? Color.Error :  stck.lFiyat1 <= 1000 ? Color.Warning :Color.Primary)">
                                            <b>Fiyat:</b> @stck.lFiyat1 ₺
                                        </MudText>
                                    </div>

                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
                @if (_loading)
                {
                    <div class="d-flex justify-content-center my-2">
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary"  />
                    </div>
                }
            </div>
        </div>
    </DialogContent>
</MudDialog>

@code {
    private bool _loading = false;
    private bool _error = false;
    private string _errorMessage = "";
    private int pageSize = 20;
    private int currentPage = 1;
    private List<Stock> newItems = new();
    //private bool _initialLoadDone = false;

    private Transition transition = Transition.Fade;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public List<Stock> FilteredStock { get; set; } = new();
    [Parameter] public List<Stock> AddedStock { get; set; } = new();
    [Parameter] public string sFiyatTipi { get; set; } = "";

    private string searchTerm = "";

    // private IEnumerable<string> GetResimler(Stock stck)
    // {
    //     var resimler = new List<string> { stck.ImageUrl, stck.ImageUrl2, stck.ImageUrl3, stck.ImageUrl4 };
    //     return resimler
    //         .Where(img => img != null && img.Length > 0)
    //         .Select(img => $"{img!}");
    // }
    // public static string? ToBase64Image(byte[]? data)
    // {
    //     if (data == null || data.Length == 0)
    //         return null;

    //     var base64 = Convert.ToBase64String(data);
    //     return $"data:image/jpeg;base64,{base64}";
    // }
   
    protected override async Task OnInitializedAsync()
    {
        AddedStock.Clear();
        Snackbar.Configuration.VisibleStateDuration = 300;
        Snackbar.Configuration.HideTransitionDuration = 100;
        Snackbar.Configuration.ShowTransitionDuration = 300;
        await Filter();
    }

    //private async Task Filter1()
    //{
    //    try
    //    {
    //        _loading = true;
    //        _error = false;

    //        string sFiyatTipi = _authService.Auth?.sAktifFiyatTipi ?? "1";
    //        string sDepo = _authService.Auth?.sDepo ?? "";

    //        (newItems, _errorMessage) = await OrderService.GetOrderStocks(currentPage, pageSize, searchTerm);
    //        if (newItems?.Any() == true)
    //        {
    //            FilteredStock.AddRange(newItems);
    //            currentPage++;
    //        }
    //        if (!string.IsNullOrEmpty(_errorMessage))
    //            _error = true;

    //        StateHasChanged();
    //    }
    //    catch (Exception ex)
    //    {
    //        _error = true;
    //        _errorMessage = $"Hata oluştu: {ex.Message}";
    //    }
    //    finally
    //    {
    //        _loading = false;
    //    }
    //}
    private async Task Filter()
    {
        if (_loading) return;

        _loading = true;
        StateHasChanged();

        try
        {
            string sFiyatTipi = _authService.Auth?.sAktifFiyatTipi ?? "1";
            string sDepo = _authService.Auth?.sDepo ?? "";
            (newItems, _errorMessage) = await OrderService.GetOrderStocks(currentPage, pageSize, searchTerm);

            if (newItems?.Any() == true)
            {
                FilteredStock.AddRange(newItems);
                currentPage++;
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnScrollReachedBottom()
    {
        await Filter();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("attachScrollListener", DotNetObjectReference.Create(this));
        }
    }
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilteredStock.Clear();
           await  Filter();
        }
    }

    private void AddStock(Stock stock)
    {
        AddedStock.Add(stock);
        Snackbar.Add("Ürün Eklendi.", Severity.Success);
    }
    private void ClosePopup()
    {
        var copy = new List<Stock>(AddedStock);
        AddedStock.Clear();
        MudDialog.Close(DialogResult.Ok(copy));
    }
}
<script>
    window.attachScrollListener = function (dotnetHelper) {
        const scrollableDiv = document.querySelector('div[style*="overflow-y: auto;"]');
        if (!scrollableDiv) return;

        let timeoutId;
        scrollableDiv.addEventListener('scroll', () => {
            if (timeoutId) clearTimeout(timeoutId);

            timeoutId = setTimeout(() => {
                if ((scrollableDiv.scrollTop + scrollableDiv.clientHeight) >= scrollableDiv.scrollHeight - 50) {
                    dotnetHelper.invokeMethodAsync('OnScrollReachedBottom');
                }
            }, 300);
        });
    };
</script>