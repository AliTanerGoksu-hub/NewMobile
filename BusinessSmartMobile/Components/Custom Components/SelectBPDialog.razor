@inject MudBlazor.IDialogService DialogService
@inject OrderService OrderService

@code {

}

@*<MudDialog>
        <TitleContent>Müşteri Seç</TitleContent>
        <DialogContent>
            <MudTextField Label="Ara..." @bind-Value="searchTerm" Adornment="Adornment.Start" AdornmentIcon="mdi-magnify" />

            <MudList>
                @foreach (var musteri in FilteredMusteriler)
                {
                    <MudListItem Button OnClick="() => SelectMusteri(musteri)">
                        @musteri.sAciklama
                    </MudListItem>
                }
            </MudList>
        </DialogContent>
    </MudDialog>*@



@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}
@if (_error)
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}
<MudDialog FullScreen="true" MaxWidth="MaxWidth.False" FullWidth="true">

    <DialogContent>
        <div style="height: 100vh; display: flex; flex-direction: column; padding: 0; margin: 0;">

            <!-- Başlık -->
            <div style="padding: 16px 16px 8px 16px; border-bottom: 1px solid #ddd;">
                <MudText Typo="Typo.h6" Align="Align.Center">Firma Seç</MudText>
            </div>

            <!-- Arama -->
            <div style="padding: 0 16px 8px 16px;">
                <MudTextField Label="Ara..." @bind-Value="searchTerm" OnKeyUp="HandleKeyDown"
                              Adornment="Adornment.Start" AdornmentIcon="mdi-magnify" Class="w-100" />
            </div>

            <!-- İçerik -->
            <div style="flex: 1; overflow-y: auto; padding: 0 16px 16px 16px;">
                <MudGrid GutterSize="16px">
                    @foreach (var firm in Musteriler)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Style="cursor:pointer; height: 100%; min-height: 240px;"
                                     Class="mb-4 d-flex flex-column"
                                     @onclick="() => SelectMusteri(firm)">
                                <MudCardContent>

                                    <MudText Typo="Typo.caption" Color="Color.Secondary"
                                             Class="text-center mb-1 px-2"
                                             Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                        <b>Firma Kodu:</b> @firm.sKodu
                                    </MudText>

                                    <MudTooltip Text="@firm.sAciklama">
                                        <MudText Typo="Typo.h6" Class="text-center px-2"
                                                 Style="word-break: break-word; min-height: 110px; max-height: 110px; overflow: hidden;">
                                            @firm.sAciklama
                                        </MudText>
                                    </MudTooltip>
                                    <MudText Class="text-center mt-4"
                                             Style="@GetRiskStyle(firm.ToplamRisk)">
                                        Risk: @firm.ToplamRisk
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>

        </div>
    </DialogContent>

</MudDialog>





@code {
    private bool _loading = false;
    private bool _error = false;
    private string _errorMessage = "";
    private bool _initialLoadDone = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public List<TbFirma> Musteriler { get; set; } = new();
    [Parameter] public TbFirma? SeciliFirma { get; set; }

    private string searchTerm = "";


    private void SelectMusteri(TbFirma musteri)
    {
        MudDialog.Close(DialogResult.Ok(musteri));
    }







    protected override async Task OnInitializedAsync()
    {

        await Filter();
    }

    private async Task Filter()
    {
        try
        {
            _loading = true;
            _error = false;
            (Musteriler, _errorMessage) = await OrderService.GetOrderBusinessPartners(searchTerm);
            _loading = false;
            StateHasChanged();
            if (!string.IsNullOrEmpty(_errorMessage))
            {
                _error = true;
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Filter();
        }
    }

    private string GetRiskStyle(double risk)
    {
        return $"display: flex; justify-content: center; align-items: center; text-align: center; font-weight:{(risk < 0 ? "bold" : "normal")}; color:{(risk < 0 ? "red" : "black")};";
    }
}

