@inject NavigationManager Navigation
@inject AuthService AuthService

<MudDialog MaxWidth="MaxWidth.Large" Class="modern-report-dialog">
    <TitleContent>
        <div class="report-dialog-header fade-in-down">
            <div class="report-icon-container">
                <MudIcon Icon="@Icons.Material.Filled.Assessment" Size="Size.Large" Style="color: white;" />
            </div>
            <div>
                <MudText Typo="Typo.h5" Class="dialog-title">Raporlar</MudText>
                <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.8); font-size: 0.875rem;">Görüntülemek istediğiniz raporu seçin</MudText>
            </div>
        </div>
    </TitleContent>

    <DialogContent Style="padding: 24px; background: #f8f9fa;">
        <MudGrid Spacing="3">
            @{
                int delay = 1;
            }
            @foreach (var rapor in RaporListesi)
            {
                <MudItem xs="12" sm="6" md="4" Class="fade-in-up delay-@delay">
                    <MudCard Class="report-card hover-lift-smooth" @onclick="@(() => OpenRapor(rapor.Url))" Style="cursor: pointer; height: 100%;">
                        <MudCardContent Style="text-align: center; padding: 24px;">
                            <div class="report-card-icon" Style="background: @GetGradientForReport(rapor.Ad);">
                                <MudIcon Icon="@rapor.Icon" Size="Size.Large" Style="color: white; font-size: 40px;" />
                            </div>
                            <MudText Typo="Typo.h6" Style="margin-top: 16px; font-weight: 600; color: #2c3e50;">
                                @rapor.Ad
                            </MudText>
                            <MudText Typo="Typo.body2" Style="color: #6c757d; margin-top: 8px;">
                                @GetReportDescription(rapor.Ad)
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                delay++;
            }
        </MudGrid>
    </DialogContent>

    <DialogActions Style="padding: 16px 24px; background: white; border-top: 1px solid #e9ecef;">
        <MudButton Color="Color.Default" OnClick="CloseDialog" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Close">
            Kapat
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private bool _error = false;
    private string _errorMessage = "";
    private bool _loading = false;
    private List<TbYetkiRapor> permissions = new();
    private List<ReportItem> RaporListesi = new()
{
        new ReportItem("Ödenecek Çek", "/payableCheque", Icons.Material.Filled.Payment),
        new ReportItem("Satış Analizi", "/salesAnalysis", Icons.Material.Filled.BarChart),
        new ReportItem("Satış Ciroları", "/salesTurnover", Icons.Material.Filled.ShowChart),
        new ReportItem("Satış Ciroları Satıcılar", "/salesTurnoverVendors", Icons.Material.Filled.People),
        new ReportItem("Satış Ciroları Sınıflandırmaları", "/salesTurnoverClassifications", Icons.Material.Filled.Category),
        new ReportItem("Satış Kalan Raporu", "/salesRemaining", Icons.Material.Filled.ListAlt),
        new ReportItem("Teslimat Rapor", "/deliveryReport", Icons.Material.Filled.DeliveryDining)
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {

            string user= AuthService.Auth?.PERSONELKODU ?? throw new Exception("Personel Kodu Bulunamadı.");
            var (permissions, _errorMessage) = await AuthService.GetReportPerm(user);
            RaporListesi = RaporListesi
     .Where(r => permissions.Any(p => p.RaporAciklama == r.Ad && p.YetkisiVar))
     .ToList();
        }
        catch (Exception ex)
        {

        }
    }

    private void OpenRapor(string url)
    {
        Navigation.NavigateTo(url);
        MudDialog.Close();
    }

    private void CloseDialog()
    {
        MudDialog.Close();
    }

    private string GetGradientForReport(string reportName)
    {
        return reportName switch
        {
            "Ödenecek Çek" => "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            "Satış Analizi" => "linear-gradient(135deg, #11998e 0%, #38ef7d 100%)",
            "Satış Ciroları" => "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
            "Satış Ciroları Satıcılar" => "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
            "Satış Ciroları Sınıflandırmaları" => "linear-gradient(135deg, #fa709a 0%, #fee140 100%)",
            "Satış Kalan Raporu" => "linear-gradient(135deg, #30cfd0 0%, #330867 100%)",
            "Teslimat Rapor" => "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
            _ => "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
        };
    }

    private string GetReportDescription(string reportName)
    {
        return reportName switch
        {
            "Ödenecek Çek" => "Ödeme planları ve çek takibi",
            "Satış Analizi" => "Detaylı satış performansı",
            "Satış Ciroları" => "Toplam satış cirosları",
            "Satış Ciroları Satıcılar" => "Satıcı bazlı cirolar",
            "Satış Ciroları Sınıflandırmaları" => "Kategori bazlı cirolar",
            "Satış Kalan Raporu" => "Açık siparişler",
            "Teslimat Rapor" => "Teslimat durumu",
            _ => "Rapor detayları"
        };
    }

    private record ReportItem(string Ad, string Url, string Icon);
}

<style>
    .modern-report-dialog {
        border-radius: 24px;
        overflow: hidden;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }

    .report-dialog-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 24px;
        display: flex;
        align-items: center;
        gap: 16px;
        color: white;
    }

    .report-icon-container {
        width: 56px;
        height: 56px;
        background: rgba(255,255,255,0.2);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(10px);
    }

    .dialog-title {
        font-weight: 600;
        color: white;
        margin: 0;
    }

    .report-card {
        background: white;
        border-radius: 16px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid #e9ecef;
        height: 100%;
    }

    .report-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 24px rgba(0,0,0,0.15);
        border-color: transparent;
    }

    .report-card-icon {
        width: 80px;
        height: 80px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        transition: transform 0.3s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .report-card:hover .report-card-icon {
        transform: scale(1.1) rotate(5deg);
    }

    /* Animation delays */
    .delay-1 { animation-delay: 0.1s; }
    .delay-2 { animation-delay: 0.2s; }
    .delay-3 { animation-delay: 0.3s; }
    .delay-4 { animation-delay: 0.4s; }
    .delay-5 { animation-delay: 0.5s; }
    .delay-6 { animation-delay: 0.6s; }
    .delay-7 { animation-delay: 0.7s; }

    /* Responsive */
    @@media (max-width: 600px) {
        .report-dialog-header {
            padding: 20px 16px;
        }

        .report-icon-container {
            width: 48px;
            height: 48px;
        }

        .report-card-icon {
            width: 64px;
            height: 64px;
        }
    }
</style>
