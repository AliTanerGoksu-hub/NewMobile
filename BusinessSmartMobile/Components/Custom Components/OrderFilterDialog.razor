@inject IDialogService DialogService
@inject AuthService _authService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudDatePicker Date="order.beginDate" DateChanged="@((DateTime? val) => order.beginDate = val)" Label="Başlangıç Tarihi" Format="dd/MM/yyyy" Style="width: 100%;" />
            </MudItem>
            <MudItem xs="12">
                <MudDatePicker Date="order.endDate" DateChanged="@((DateTime? val) => order.endDate = val)" Label="Bitiş Tarihi" Format="dd/MM/yyyy" Style="width: 100%;" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="order.lSiparisNo" Label="Sipariş No" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="order.sSiparisiVeren" Label="Stok Açıklama" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="order.sFirmaAciklama" Label="Firma" />
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value="order.opt" Label="Operatör">
                    @foreach (var opt in _operators)
                    {
                        <MudSelectItem Value="@opt.Key">@opt.Value</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="order.lKalan" Label="Kalan" />
            </MudItem>
        </MudGrid>
        @if (_error)
        {
            <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Filtrele</MudButton>
        <MudButton Color="Color.Primary" OnClick="Cancel">İptal</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _error = false;
    private string _errorMessage = "";

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TbSiparis order { get; set; } = new TbSiparis();

    [Parameter]
    public List<TbFirma> firmaList { get; set; } = new List<TbFirma>();

    private Dictionary<string, string> _operators = new Dictionary<string, string>
    {
        { "=", "Eşittir" },
        { ">", "Büyüktür" },
        { "<", "Küçüktür" },
        { ">=", "Büyük Eşittir" },
        { "<=", "Küçük Eşittir" }
    };

    private async Task OnBeginDateChanged(DateTime date)
    {
        order.beginDate = date;
    }

    private async Task OnEndDateChanged(DateTime date)
    {
        order.endDate = date;
    }

    private void Close()
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        order.sSaticiRumuzu = _authService.Auth.sSaticiRumuzu ?? throw new Exception("Satıcı rumuzu bulunamadı.");
        order.sDepo = _authService.Auth.sDepo ?? throw new Exception("Depo bilgisi bulunamadı.");
        MudDialog.Close(DialogResult.Ok(order));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}