@page "/orders"
@inject OrderService OrderService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthService _authService

<!-- Modern Page Header -->
<div class="page-header fade-in-down" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
    <div class="page-header-content" style="max-width: 100%; padding: 0 16px;">
        <div class="d-flex justify-space-between align-center">
            <div class="fade-in-left delay-1">
                <MudText Typo="Typo.h5" Class="page-header-title">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Style="vertical-align: middle; margin-right: 8px;" />
                    Siparişler
                </MudText>
                <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9);">
                    Sipariş yönetimi ve takibi
                </MudText>
            </div>
            <div class="fade-in-right delay-2" style="display: flex; gap: 8px;">
                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.2); border-radius: 12px;"
                               @onclick="@(() => OpenFilterDialog())" 
                               aria-label="Filtre" />
                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.2); border-radius: 12px;"
                               @onclick="@(() => Navigation.NavigateTo("/newOrder"))" 
                               aria-label="Yeni Sipariş" />
            </div>
        </div>
    </div>
</div>

@if (_loading)
{
    <div class="loading-container fade-in">
        <div class="loading-spinner"></div>
        <MudText Typo="Typo.body2" Class="loading-text">Siparişler yükleniyor...</MudText>
    </div>
}

@if (_error)
{
    <div class="error-container fade-in-up">
        <MudIcon Icon="@Icons.Material.Filled.Error" Class="error-icon" />
        <div class="error-content">
            <div class="error-title">Hata Oluştu</div>
            <div class="error-message">@_errorMessage</div>
        </div>
    </div>
}

@if (!_loading && !_error)
{
<div class="table-container fade-in-up delay-1">
<MudTable Breakpoint="Breakpoint.None"
          Items="list" 
          Dense="true"
          Hover="true"
          SortLabel="Sort By"
          RowsPerPage="25"
          Striped="true"
          Bordered="false"
          FixedHeader="true"
          FixedFooter="true"
          Elevation="0"
          Style="height:calc(100vh - 200px);overflow-y:auto">
    <ToolBarContent>
        <div style="flex: 1;">
            <MudText Typo="Typo.h6" Style="color: #2c3e50; font-weight: 600;">
                <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small" Style="vertical-align: middle;" />
                Sipariş Listesi
            </MudText>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>İşlem</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lSiparisNo)">Sipariş No</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.dteSiparisTarihi)">Sipariş Tarihi</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lMiktari)">Miktar</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lSevkiyat)">Sevk Edilen</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lKalan)">Kalan</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lTutari)">Tutar</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lIskontoTutari)">İskonto Tutarı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.nKdvOrani)">KDV Oranı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.sFirmaAciklama)">Firma</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered"
                           Color="Color.Primary"
                           @onclick="() => OpenDetailDialog(context.lSiparisNo)"
                           aria-label="Düzenle">
            </MudIconButton>
        </MudTd>
        <MudTd DataLabel="Sipariş No">@context.lSiparisNo</MudTd>
        <MudTd DataLabel="Sipariş Tarihi">
            @if (!string.IsNullOrEmpty(@context.dteSiparisTarihi?.ToString()))
            {
                @context.dteSiparisTarihi.ToString().Substring(0, 10);
            }
        </MudTd>
        <MudTd DataLabel="Miktar" Style="text-align:right">@context.lMiktari</MudTd>
        <MudTd DataLabel="Sevk Edilen" Style="text-align:right">@context.lSevkiyat</MudTd>
        <MudTd DataLabel="Kalan" Style="text-align:right">@context.lKalan</MudTd>
        <MudTd DataLabel="Tutar" Style="text-align:right">@context.lTutari</MudTd>
        <MudTd DataLabel="İskonto Tutarı" Style="text-align:right">@context.lIskontoTutari</MudTd>
        <MudTd DataLabel="KDV Oranı" Style="text-align:right">@context.nKdvOrani</MudTd>
        <MudTd DataLabel="Firma">@context.sFirmaAciklama</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Gösterilecek Satır" />
    </PagerContent>
</MudTable>
</div>
}
<MudDialog @ref="barcodeDialog">
</MudDialog>

@code {
    private List<TbSiparis> list = new List<TbSiparis>();
    private TbSiparis filterValues = new TbSiparis();
    private string apiMessage = string.Empty;
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "";
    private MudDialog barcodeDialog;

    protected override async Task OnInitializedAsync()
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        var siparis = new TbSiparis
        {
            sSaticiRumuzu = _authService.Auth.sSaticiRumuzu,
            sDepo = _authService.Auth.sDepo
        };

        await LoadList(siparis);
    }

    private async Task OpenFilterDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters { { "order", filterValues } };
        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.OrderFilterDialog>("Filtrele", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            filterValues = (TbSiparis)result.Data;
            filterValues.sSaticiRumuzu = _authService.Auth?.sSaticiRumuzu ?? throw new Exception("Satıcı rumuzu bulunamadı.");
            filterValues.sDepo = _authService.Auth?.sDepo ?? throw new Exception("Depo bilgisi bulunamadı.");
            await LoadList(filterValues);
        }
    }

    private async Task OpenDetailDialog(string lSiparisNo)
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        (List<TbSiparis> orderDetails, string message) = await OrderService.GetOrderDetails(lSiparisNo, _authService.Auth.sSaticiRumuzu);
        if (!string.IsNullOrEmpty(message))
        {
            _error = true;
            _errorMessage = message;
            StateHasChanged();
            return;
        }

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
        var parameters = new DialogParameters
        {
            { "orderDetail", orderDetails },
            { "lSiparisNo", lSiparisNo }
        };

        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.OrderDetail>(
            "Sipariş Detayları",
            parameters,
            options);
        var result = await dialog.Result;
        await LoadList(filterValues);
    }

    private async Task OpenBarcodeScanner()
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        var siparis = new TbSiparis
        {
            sSaticiRumuzu = _authService.Auth.sSaticiRumuzu,
            sDepo = _authService.Auth.sDepo
        };
        await LoadList(siparis);
    }

    private async Task LoadList(TbSiparis tbSiparis)
    {
        try
        {
            _loading = true;
            _error = false;

            tbSiparis.sSaticiRumuzu = _authService.Auth?.sSaticiRumuzu ?? throw new Exception("Satıcı rumuzu bulunamadı.");
            tbSiparis.sDepo = _authService.Auth?.sDepo ?? throw new Exception("Depo bilgisi bulunamadı.");

            (list, apiMessage) = await OrderService.GetOrders(
                tbSiparis.lSiparisNo,
                tbSiparis.sSiparisiVeren,
                tbSiparis.sFirmaAciklama,
                tbSiparis.opt,
                tbSiparis.lKalan,
                tbSiparis.beginDate,
                tbSiparis.endDate,
                tbSiparis.sSaticiRumuzu,
                tbSiparis.sDepo
            );

            if (!string.IsNullOrEmpty(apiMessage))
            {
                _error = true;
                _errorMessage = apiMessage;
            }
            else if (!list.Any())
            {
                _error = true;
                _errorMessage = "Girilen Filtreye Ait Veri Bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}