@page "/orders"
@inject OrderService OrderService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthService _authService

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}

@if (_error)
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}

<MudTable Class="mx-2"
          Breakpoint="Breakpoint.None"
          Items="list" Dense="true"
          Hover="true"
          SortLabel="Sort By"
          RowsPerPage="25"
          Striped="true"
          Bordered="true"
          FixedHeader="true"
          FixedFooter="true"
          Style="height:90vh;overflow-y:auto">
    <ToolBarContent>
        <div style="flex: 1;">
            <MudText Typo="Typo.h6">Siparişler</MudText>
        </div>
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" @onclick="@(() => OpenFilterDialog())" aria-label="Filtre"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="@(() => Navigation.NavigateTo("/newOrder"))" aria-label="Yeni Sipariş"></MudIconButton>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>İşlem</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lSiparisNo)">Sipariş No</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.dteSiparisTarihi)">Sipariş Tarihi</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lMiktari)">Miktar</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lSevkiyat)">Sevk Edilen</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lKalan)">Kalan</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lTutari)">Tutar</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.lIskontoTutari)">İskonto Tutarı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.nKdvOrani)">KDV Oranı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSiparis, object>(x=>x.sFirmaAciklama)">Firma</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered"
                           Color="Color.Primary"
                           @onclick="() => OpenDetailDialog(context.lSiparisNo)"
                           aria-label="Düzenle">
            </MudIconButton>
        </MudTd>
        <MudTd DataLabel="Sipariş No">@context.lSiparisNo</MudTd>
        <MudTd DataLabel="Sipariş Tarihi">
            @if (!string.IsNullOrEmpty(@context.dteSiparisTarihi?.ToString()))
            {
                @context.dteSiparisTarihi.ToString().Substring(0, 10);
            }
        </MudTd>
        <MudTd DataLabel="Miktar" Style="text-align:right">@context.lMiktari</MudTd>
        <MudTd DataLabel="Sevk Edilen" Style="text-align:right">@context.lSevkiyat</MudTd>
        <MudTd DataLabel="Kalan" Style="text-align:right">@context.lKalan</MudTd>
        <MudTd DataLabel="Tutar" Style="text-align:right">@context.lTutari</MudTd>
        <MudTd DataLabel="İskonto Tutarı" Style="text-align:right">@context.lIskontoTutari</MudTd>
        <MudTd DataLabel="KDV Oranı" Style="text-align:right">@context.nKdvOrani</MudTd>
        <MudTd DataLabel="Firma">@context.sFirmaAciklama</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Gösterilecek Satır" />
    </PagerContent>
</MudTable>
<MudDialog @ref="barcodeDialog">
</MudDialog>

@code {
    private List<TbSiparis> list = new List<TbSiparis>();
    private TbSiparis filterValues = new TbSiparis();
    private string apiMessage = string.Empty;
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "";
    private MudDialog barcodeDialog;

    protected override async Task OnInitializedAsync()
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        var siparis = new TbSiparis
        {
            sSaticiRumuzu = _authService.Auth.sSaticiRumuzu,
            sDepo = _authService.Auth.sDepo
        };

        await LoadList(siparis);
    }

    private async Task OpenFilterDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters { { "order", filterValues } };
        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.OrderFilterDialog>("Filtrele", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            filterValues = (TbSiparis)result.Data;
            filterValues.sSaticiRumuzu = _authService.Auth?.sSaticiRumuzu ?? throw new Exception("Satıcı rumuzu bulunamadı.");
            filterValues.sDepo = _authService.Auth?.sDepo ?? throw new Exception("Depo bilgisi bulunamadı.");
            await LoadList(filterValues);
        }
    }

    private async Task OpenDetailDialog(string lSiparisNo)
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        (List<TbSiparis> orderDetails, string message) = await OrderService.GetOrderDetails(lSiparisNo, _authService.Auth.sSaticiRumuzu);
        if (!string.IsNullOrEmpty(message))
        {
            _error = true;
            _errorMessage = message;
            StateHasChanged();
            return;
        }

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
        var parameters = new DialogParameters
        {
            { "orderDetail", orderDetails },
            { "lSiparisNo", lSiparisNo }
        };

        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.OrderDetail>(
            "Sipariş Detayları",
            parameters,
            options);
        var result = await dialog.Result;
        await LoadList(filterValues);
    }

    private async Task OpenBarcodeScanner()
    {
        if (_authService.Auth == null)
        {
            _error = true;
            _errorMessage = "Kullanıcı giriş yapmamış.";
            StateHasChanged();
            return;
        }

        var siparis = new TbSiparis
        {
            sSaticiRumuzu = _authService.Auth.sSaticiRumuzu,
            sDepo = _authService.Auth.sDepo
        };
        await LoadList(siparis);
    }

    private async Task LoadList(TbSiparis tbSiparis)
    {
        try
        {
            _loading = true;
            _error = false;

            tbSiparis.sSaticiRumuzu = _authService.Auth?.sSaticiRumuzu ?? throw new Exception("Satıcı rumuzu bulunamadı.");
            tbSiparis.sDepo = _authService.Auth?.sDepo ?? throw new Exception("Depo bilgisi bulunamadı.");

            (list, apiMessage) = await OrderService.GetOrders(
                tbSiparis.lSiparisNo,
                tbSiparis.sSiparisiVeren,
                tbSiparis.sFirmaAciklama,
                tbSiparis.opt,
                tbSiparis.lKalan,
                tbSiparis.beginDate,
                tbSiparis.endDate,
                tbSiparis.sSaticiRumuzu,
                tbSiparis.sDepo
            );

            if (!string.IsNullOrEmpty(apiMessage))
            {
                _error = true;
                _errorMessage = apiMessage;
            }
            else if (!list.Any())
            {
                _error = true;
                _errorMessage = "Girilen Filtreye Ait Veri Bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}