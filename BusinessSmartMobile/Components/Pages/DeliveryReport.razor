@page "/deliveryReport"
@inject ReportsService ReportsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject AuthService _authService
@inject NavigationManager Navigation
@using System.Globalization;

<!-- Modern Page Header -->
<div class="page-header fade-in-down" style="background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); padding-top: 16px; margin-top: 0;">
    <div class="page-header-content" style="max-width: 100%; padding: 0 16px;">
        <div class="d-flex justify-space-between align-center">
            <div class="fade-in-left delay-1" style="display: flex; align-items: center; gap: 12px;">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.95); border-radius: 12px; color: #a8edea;"
                               @onclick="@(() => Navigation.NavigateTo("/home"))" 
                               aria-label="Geri" />
                <div>
                    <MudText Typo="Typo.h5" Class="page-header-title">
                        <MudIcon Icon="@Icons.Material.Filled.DeliveryDining" Style="vertical-align: middle; margin-right: 8px;" />
                        Teslimat Raporu
                    </MudText>
                    <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9);">
                        Teslimat durumu ve takibi
                    </MudText>
                </div>
            </div>
            <div class="fade-in-right delay-2">
                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.95); border-radius: 12px; color: #a8edea;"
                               @onclick="@(() => OpenFilterDialog())" 
                               aria-label="Filtre" />
            </div>
        </div>
    </div>
</div>

@if (_loading)
{
    <div class="loading-container fade-in">
        <div class="loading-spinner"></div>
        <MudText Typo="Typo.body2" Class="loading-text">Rapor hazırlanıyor...</MudText>
    </div>
}

@if (_error)
{
    <div class="error-container fade-in-up">
        <MudIcon Icon="@Icons.Material.Filled.Error" Class="error-icon" />
        <div class="error-content">
            <div class="error-title">Hata Oluştu</div>
            <div class="error-message">@_errorMessage</div>
        </div>
    </div>
}

@if (!_loading && !_error)
{
<div class="table-container fade-in-up delay-1">
<MudTable Breakpoint="Breakpoint.None"
          Items="list" 
          Dense="true"
          Hover="true"
          SortLabel="Sort By"
          RowsPerPage="25"
          Striped="true"
          Bordered="false"
          FixedHeader="true"
          FixedFooter="true"
          Elevation="0"
          Style="height:calc(100vh - 280px);overflow-y:auto">
    <ToolBarContent>
        <div style="flex: 1;">
            <MudText Typo="Typo.h6" Style="color: #2c3e50; font-weight: 600;">
                <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small" Style="vertical-align: middle;" />
                Teslimat Listesi
            </MudText>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.dteSiparisTarihi)">Tarih</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.sFirmaAciklama)">Firma Adı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.sSiparisiAlan)">Siparişi Alan</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.sKodu)">Ürün Kodu</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.sAciklama)">Ürün Açıklama</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x=>x.lMiktar)">Miktar</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.lMiktari)">Sipariş Miktarı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.nBirimCarpan)">Koli İçi</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.lMevcut)">Mevcut</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.lSevkiyat)">Sevkiyat</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x=>x.lBekleyen)">Bekleyen</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.lKalan)">Kalan</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x=>x.dteTeslimTarihi)">Teslim Tarihi</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.sAciklama2)">Açıklama 2</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbDeliveryReport, object>(x => x.sAciklama3)">Açıklama 3</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Tarih">
            @if (!string.IsNullOrEmpty(@context.dteSiparisTarihi?.ToString()))
            {
                @context.dteSiparisTarihi.ToString().Substring(0, 10)
                ;
            }
        </MudTd>
        <MudTd DataLabel="Firma Adı">@context.sFirmaAciklama</MudTd>
        <MudTd DataLabel="Siparişi Alan">@context.sSiparisiAlan</MudTd>
        <MudTd DataLabel="Ürün Kodu">@context.sKodu</MudTd>
        <MudTd DataLabel="Ürün Açıklama">@context.sAciklama</MudTd>
        @* <MudTd DataLabel="Miktar" Style="text-align:right">@context.lMiktar.ToString("N2")</MudTd> *@
        <MudTd DataLabel="Sipariş Miktarı" Style="text-align:right">@context.lMiktari.ToString("N0")</MudTd>
        <MudTd DataLabel="Koli İçi" Style="text-align:right">@context.nBirimCarpan.ToString("N0")</MudTd>
        <MudTd DataLabel="Mevcut" Style="text-align:right">@context.lMevcut.ToString("N0")</MudTd>
        <MudTd DataLabel="Sevkiyat" Style="text-align:right">@context.lSevkiyat.ToString("N0")</MudTd>
        @* <MudTd DataLabel="Bekleyen" Style="text-align:right">@context.lBekleyen.ToString("N2")</MudTd> *@
        <MudTd DataLabel="Kalan" Style="text-align:right">
            @context.lKalan.ToString("N0")
            @* <MudTd DataLabel="Teslim Tarihi">
            @if (!string.IsNullOrEmpty(@context.dteTeslimTarihi?.ToString()))
            {
                @context.dteTeslimTarihi.ToString().Substring(0, 10);
            } *@
        </MudTd>
        <MudTd DataLabel="Açıklama 2">@context.sAciklama2</MudTd>
        <MudTd DataLabel="Açıklama 3">@context.sAciklama3</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Gösterilecek Satır" />
    </PagerContent>
</MudTable>
</div>
}

@code {
    //private IEnumerable<TbFirma> Elements = Enumerable.Empty<TbFirma>();
    private List<TbDeliveryReport> list = new List<TbDeliveryReport>();
    private string apiMessage = string.Empty;
    private TbDeliveryReport filteredCheque = new TbDeliveryReport();
    static DateTime now = DateTime.Now;
    static DateTime firstDayOfMonth = new DateTime(now.Year, now.Month, 1);
    static DateTime lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
    string startDateStr = firstDayOfMonth.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture);
    string endDateStr = lastDayOfMonth.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture);
    static string sDepo = "";
    static string type = "1";
    static string sSaticiRumuzu = "";
    static string personelKodu = "";
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        sDepo = _authService.Auth.sDepo;
        sSaticiRumuzu = _authService.Auth.sSaticiRumuzu;
        personelKodu = _authService.Auth.PERSONELKODU;
        LoadList(startDateStr, endDateStr, sSaticiRumuzu, sDepo, "1");
    }





    private async Task OpenFilterDialog()
    {
        try
        {
            DateTime startDate = DateTime.ParseExact(startDateStr, "dd.MM.yyyy", CultureInfo.InvariantCulture);
            DateTime endDate = DateTime.ParseExact(endDateStr, "dd.MM.yyyy", CultureInfo.InvariantCulture);
            bool whsAndVendorPerm = (personelKodu.ToUpper().Contains("AD")) ? true : false;
            var parameters = new DialogParameters
            {
                ["FilterOptions"] = new ReportFilterOptions
                {
                    ShowVendor = whsAndVendorPerm,
                    ShowStore = false,
                    ShowClass = false,
                    ShowWarehouse = whsAndVendorPerm,
                    ShowType = true,
                    ShowCustomerSearch = true
                },
                ["Filter"] = new ReportFilters
                {
                    StartDate = startDate,
                    EndDate = endDate,
                    Warehouse = sDepo,
                    Vendor = sSaticiRumuzu,
                    Type = type

                }

            };

            var dialog = DialogService.Show<BusinessSmartMobile.Components.Custom_Components.ReportFilter>("Filtrele", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                var filter = (ReportFilters)result.Data;
                DateTime resStartDate = filter.StartDate.Value;
                startDateStr = resStartDate.ToString("dd.MM.yyyy");
                DateTime resEndDate = filter.EndDate.Value;
                endDateStr = resEndDate.ToString("dd.MM.yyyy");
                sDepo = filter.Warehouse;
                sSaticiRumuzu = filter.Vendor;
                type = filter.Type;
                LoadList(startDateStr, endDateStr, sSaticiRumuzu, sDepo, type);

            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
            StateHasChanged();
        }
    }



    private async void LoadList(string startDate, string endDate, string sSaticiRumuzu, string sDepo, string type)
    {


        try
        {
            (list, apiMessage) = await ReportsService.GetDeliveryReport(startDate, endDate, sSaticiRumuzu, sDepo, type);
            _loading = true;
            _error = false;

            if (!string.IsNullOrEmpty(apiMessage))
            {
                _error = true;
                _errorMessage = apiMessage;
            }
            else if (!list.Any())
            {
                _error = true;
                _errorMessage = "Girilen Filtreye Ait Veri Bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }

    }
}