@page "/stocks"
@inject StockService StockService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<!-- Modern Page Header -->
<div class="page-header fade-in-down" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); margin-top: 0; padding-top: 64px;">
    <div class="page-header-content" style="max-width: 100%; padding: 0 16px;">
        <div class="d-flex justify-space-between align-center">
            <div class="fade-in-left delay-1" style="display: flex; align-items: center; gap: 12px;">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.95); border-radius: 12px; color: #11998e;"
                               @onclick="@(() => Navigation.NavigateTo("/home"))" 
                               aria-label="Geri" />
                <div>
                    <MudText Typo="Typo.h5" Class="page-header-title">
                        <MudIcon Icon="@Icons.Material.Filled.Inventory" Style="vertical-align: middle; margin-right: 8px;" />
                        Stok Yönetimi
                    </MudText>
                    <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9);">
                        Ürün ve stok takibi
                    </MudText>
                </div>
            </div>
            <div class="fade-in-right delay-2" style="display: flex; gap: 8px;">
                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.95); border-radius: 12px; color: #11998e;"
                               @onclick="@(() => OpenFilterDialog())" 
                               aria-label="Filtre" />
                <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.95); border-radius: 12px; color: #11998e;"
                               @onclick="OpenBarcodeScanner" 
                               aria-label="Barkod Okut" />
            </div>
        </div>
    </div>
</div>

@if (_loading)
{
    <div class="loading-container fade-in">
        <div class="loading-spinner"></div>
        <MudText Typo="Typo.body2" Class="loading-text">Stoklar yükleniyor...</MudText>
    </div>
}

@if (_error)
{
    <div class="error-container fade-in-up">
        <MudIcon Icon="@Icons.Material.Filled.Error" Class="error-icon" />
        <div class="error-content">
            <div class="error-title">Hata Oluştu</div>
            <div class="error-message">@_errorMessage</div>
        </div>
    </div>
}

@if (!_loading && !_error)
{
<div class="table-container fade-in-up delay-1">
<MudTable Breakpoint="Breakpoint.None"
          Items="list" 
          Dense="true"
          Hover="true"
          SortLabel="Sort By"
          RowsPerPage="25"
          Striped="true"
          Bordered="false"
          FixedHeader="true"
          FixedFooter="true"
          Elevation="0"
          Style="height:calc(100vh - 200px);overflow-y:auto">
    <ToolBarContent>
        <div style="flex: 1;">
            <MudText Typo="Typo.h6" Style="color: #2c3e50; font-weight: 600;">
                <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small" Style="vertical-align: middle;" />
                Stok Listesi
            </MudText>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="display:none;"><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.nStokID)">Stok Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.sKodu)">Stok Kodu</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.sAciklama)">Stok Adı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.lMevcut)">Mevcut</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.sBarkod)">Barkod</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x => x.sBirimCinsi2)">Birim</MudTableSortLabel></MudTh>*@
        @*<MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.sBirimCinsi2)">Birim 2</MudTableSortLabel></MudTh>*@
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x => x.nBirimCarpan)">Koli İçi</MudTableSortLabel></MudTh>
        @*<MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x => x.lMevcut2)">Mevcut 2</MudTableSortLabel></MudTh>*@
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.lFiyat1)">Fiyat</MudTableSortLabel></MudTh>
        @if (sizeOpen == "1")
        {
            <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.sBeden)">Beden</MudTableSortLabel></MudTh>
        }
        @if (colorOpen == "1")
        {
            <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.sRenkAdi)">Renk</MudTableSortLabel></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
      
        <MudTd Style="display:none;" DataLabel="Stok ID">@context.nStokID</MudTd>
        <MudTd DataLabel="Stok Kodu">@context.sKodu</MudTd>
        <MudTd DataLabel="Stok Adı">@context.sAciklama</MudTd>
        <MudTd DataLabel="Mevcut">@context.lMevcut</MudTd>
        <MudTd DataLabel="Barkod">@context.sBarkod</MudTd>
        @*<MudTd DataLabel="Birim">@context.sBirimCinsi2</MudTd>*@
        @* <MudTd DataLabel="Birim 2">@context.sBirimCinsi2</MudTd>*@
        <MudTd DataLabel="Koli İçi">@context.nBirimCarpan</MudTd>
        @*<MudTd DataLabel="Mevcut 2">@context.lMevcut2</MudTd>*@
        @*<MudTd DataLabel="Fiyat">@((double.Parse(context.lFiyat, System.Globalization.CultureInfo.InvariantCulture)).ToString("F2", System.Globalization.CultureInfo.InvariantCulture)) </MudTd>*@
        <MudTd DataLabel="Fiyat">@context.lFiyat1 </MudTd>
        @if (sizeOpen == "1")
        {
            <MudTd DataLabel="Beden">@context.sBeden</MudTd>
        }
        @if (colorOpen == "1")
        {
            <MudTd DataLabel="Renk">@context.sRenkAdi</MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Gösterilecek Satır" />
    </PagerContent>
</MudTable>
</div>
}
<MudDialog @ref="barcodeDialog">
</MudDialog>

@code {
    //private IEnumerable<TbFirma> Elements = Enumerable.Empty<TbFirma>();
    private List<Stock> list = new List<Stock>();
    private string apiMessage = string.Empty;
    private static string colorOpen = CommonParameters.colorOpen;
    private static string sizeOpen = CommonParameters.sizeOpen;
    // private Result<List<TbFiyatTipi>> fiyatTipiListe = new Result<List<TbFiyatTipi>>();
    // private Result<List<TbDepo>> depoList = new Result<List<TbDepo>>();
    private List<TbFiyatTipi> fiyatTipiListe = new List<TbFiyatTipi>();
    private List<TbDepo> depoList = new List<TbDepo>();
    private Stock filteredStock = new Stock();
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {

        Stock stock = new Stock();
        TbFiyatTipi fiyatTipi = new TbFiyatTipi();
        TbDepo depo = new TbDepo();
        await LoadComponentValues();
        if (!_error)
        {
            LoadList(stock);
        }
    }
    //private async Task<bool> LoadComponentValue1s()
    //{

    //    depoList = await StockService.GetWarehouse();
    //    fiyatTipiListe = await StockService.GetPriceType();
    //    return _error;
    //}
    // private bool GetData<T>(Result<T> data, ref Result<T> target)
    // {
    //     if (!data.Success)
    //     {
    //         _error = true;
    //         _errorMessage = data.ErrorMessage;
    //         _loading = false;
    //         StateHasChanged();
    //         return true;
    //     }

    //     target = data;
    //     return false;
    // }

    // private async Task<bool> LoadComponentValues()
    // {
    //     var tasks = new List<Func<Task<bool>>>
    // {
    //     async () => GetData(await StockService.GetWarehouse(), ref depoList),
    //     async () => GetData(await StockService.GetPriceType(), ref fiyatTipiListe)
    // };

    //     foreach (var task in tasks)
    //     {
    //         if (await task())
    //         {
    //             return true;
    //         }
    //     }

    //     return false;
    // }

    private async Task<bool> GetData<T>(Func<Task<(T, string)>> fetchData, Action<T> setData)
    {
        try
        {
            var (result, message) = await fetchData();

            if (!string.IsNullOrEmpty(message))
            {
                _error = true;
                _errorMessage = message;
                return false;
            }

            setData(result);
            return true;
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
            return false;
        }
    }

    private async Task<bool> LoadComponentValues()
    {
        var tasks = new List<Func<Task<bool>>>
{
        async () => await GetData(() => StockService.GetWarehouse(),data => depoList = data),

    //    async () => await GetData(() => StockService.GetPriceType(),data => fiyatTipiListe = data)
    };

        foreach (var task in tasks)
        {
            if (!await task())
            {
                return false;
            }
        }

        return true;
    }

    private async Task OpenFilterDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters { { "stock", filteredStock }, { "depoList", depoList }, { "fiyatTipi", fiyatTipiListe } };
        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.StockFilterDialog>("Filtrele", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            filteredStock = (Stock)result.Data;
            LoadList(stock: filteredStock);
        }
    }

    private MudDialog barcodeDialog;

    private async void OpenBarcodeScanner()
    {

        //var barcodeScannerPage = new BusinessSmartMobile.Components.BarcodeScanner.BarcodeScanner();
        var barcodeScannerPage = new BusinessSmartMobile.Components.BarcodeReader.SingleBarcodeReaderComponent();

        await App.Current.MainPage.Navigation.PushModalAsync(barcodeScannerPage);

        var barcodeResult = await barcodeScannerPage.BarcodeResult;

        //barcodeDialog?.Show();
        string barcode = barcodeResult;
        Stock stock = new Stock();
        stock.sBarkod = barcode;
        LoadList(stock: stock);
    }
    private async void LoadList(Stock stock)
    {



        (list, apiMessage) = await StockService.GetStocks(stock.sKodu, stock.sAciklama, stock.sFiyatTipi, stock.sDepo, stock.sBarkod, stock.sRenkAdi, stock.sBeden, stock.getAll);

        try
        {
            _loading = true;
            _error = false;

            if (!string.IsNullOrEmpty(apiMessage))
            {
                _error = true;
                _errorMessage = apiMessage;  // Hata mesajını buraya atıyoruz
            }
            else if (!list.Any())
            {
                _error = true;
                _errorMessage = "Girilen Filtreye Ait Veri Bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }

    }
}