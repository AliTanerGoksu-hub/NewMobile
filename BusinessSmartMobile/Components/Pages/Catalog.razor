@page "/catalog"
@using Microsoft.AspNetCore.Components.Web
@inject StockService StockService
@inject CatalogService CatalogService
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <div style="position:fixed; top:70px; left:0; right:0; z-index:2000; background:white; padding:8px;">
        <MudTextField Label="Ara..."
                      @bind-Value="searchTerm"
                      OnKeyUp="HandleKeyDown"
                      Adornment="Adornment.Start"
                      AdornmentIcon="mdi-magnify"
                      Class="mx-auto"
                      Style="max-width:600px;" />
    </div>

    <MudGrid Spacing="1">
        @foreach (var item in catalogList)
        {
            <MudItem xs="6" sm="4" md="3">
                <MudCard Class="h-100 d-flex flex-column rounded-lg position-relative" Style="height: 100%;" @onclick="() => OpenImageDialog(item.nStokID)">
                    <MudCardMedia Image="@(!string.IsNullOrWhiteSpace(item.ImageUrl) ? item.ImageUrl : "/images/placeholder.png")" Height="200" />
                    <MudCardContent Class="d-flex flex-column justify-between">
                        <MudText Style="height:40px;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;" Typo="Typo.caption">
                            @item.sAciklama
                        </MudText>
                        <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                            ₺@item.lFiyat1.ToString("N2")
                        </MudText>
                        <MudText Typo="Typo.body2"
                                 Class="@((item.lMevcut == 0) ? "text-red font-weight-bold" : "text-secondary")">
                            Stok: @item.lMevcut
                        </MudText>
                        <MudText Typo="Typo.body2">
                            Koli İçi: @item.nBirimCarpan
                        </MudText>
                    </MudCardContent>

                    <MudFab Icon="@Icons.Material.Filled.Add"
                            Color="Color.Success"
                            Size="Size.Small"
                            Class="position-absolute"
                            Style="right:10px; bottom:10px; width:32px; height:32px; min-width:32px; min-height:32px;"
                            @onclick="() => AddToCart(item)" />
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Indeterminate Color="Color.Primary" />
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="Severity.Error" Class="my-4">@message</MudAlert>
    }

    <MudIconButton Icon="@Icons.Material.Filled.Add"
                   Color="Color.Success"
                   Style="position:fixed; right:20px; bottom:20px; z-index:2000;
                      width:40px; height:40px; border-radius:50%; background-color:#2e7d32; color:white;"
                   OnClick="@(()=>GoToOrders())" />
</MudContainer>

@code {
    private List<Stock> catalogList = new();
    public List<Stock> AddedStock = new();
    private bool isLoading = false;
    private int pageSize = 20;
    private int currentPage = 1;
    private string searchTerm = "";

    private List<Stock> newItems = new();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMoreItems();
    }

    private async Task LoadMoreItems()
    {
        if (isLoading) return;
        isLoading = true;
        StateHasChanged();
        try
        {
            (newItems, message) = await StockService.GetCatalogItemsAsync(currentPage, pageSize, "", searchTerm);
            if (newItems?.Any() == true)
            {
                catalogList.AddRange(newItems);
                currentPage++;
            }
            else
            {
                message = "Daha fazla ürün bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            message = $"Hata: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnScrollReachedBottom()
    {
        await LoadMoreItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("attachScrollListener", DotNetObjectReference.Create(this));
        }
    }

    private void AddToCart(Stock stock)
    {
        try
        {
            if (CatalogService.TryAdd(stock))
            {
                Snackbar.Add("Ürün eklendi.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Bu ürün zaten sepetinizde.", Severity.Info);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Hata: {ex.Message}", Severity.Error);
        }
    }

    private void GoToOrders()
    {
        // Artık service zaten seçilenleri tutuyor,
        // tekrar eklemeye gerek yok.
        Navigation.NavigateTo("/newOrder?from=catalog");
    }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            catalogList.Clear();
            await LoadMoreItems();
        }
    }

    private async Task OpenImageDialog(string stokId)
    {
        var (items, msg) = await StockService.GetCatalogItemsAsync(1, 1, stokId, "");
        var product = items.FirstOrDefault();
        if (product is null) { message = "Ürün bulunamadı."; return; }

        var images = new List<string>();
        if (!string.IsNullOrWhiteSpace(product.ImageUrl))
            images.Add(product.ImageUrl);

        var parameters = new DialogParameters { ["Images"] = images };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        DialogService.Show<BusinessSmartMobile.Components.Custom_Components.ImageDialog>("Ürün Resimleri", parameters, options);
    }
}

<script>
    window.attachScrollListener = function (dotnetHelper) {
        let timeoutId;
        window.addEventListener('scroll', () => {
            if (timeoutId) clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 50) {
                    dotnetHelper.invokeMethodAsync('OnScrollReachedBottom');
                }
            }, 300);
        });
    };
</script>

<style>
    .text-red {
        color: red !important;
    }

    .font-weight-bold {
        font-weight: bold !important;
    }
</style>
