@page "/catalog"
@using Microsoft.AspNetCore.Components.Web
@inject StockService StockService
@inject CatalogService CatalogService
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<!-- Modern Page Header -->
<div class="page-header fade-in-down" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); margin-top: 0; padding-top: 64px;">
    <div class="page-header-content" style="max-width: 100%; padding: 0 16px;">
        <div class="d-flex justify-space-between align-center">
            <div class="fade-in-left delay-1" style="display: flex; align-items: center; gap: 12px;">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                               Color="Color.Surface" 
                               Class="hover-scale btn-press"
                               Style="background: rgba(255,255,255,0.95); border-radius: 12px; color: #f5576c;"
                               @onclick="@(() => Navigation.NavigateTo("/home"))" 
                               aria-label="Geri" />
                <div>
                    <MudText Typo="Typo.h5" Class="page-header-title">
                        <MudIcon Icon="@Icons.Material.Filled.MenuBook" Style="vertical-align: middle; margin-right: 8px;" />
                        Katalog
                    </MudText>
                    <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9);">
                        Ürün kataloğunu inceleyin
                    </MudText>
                </div>
            </div>
        </div>
    </div>
</div>

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 8px;">
    <!-- Search Bar with Animation -->
    <div class="fade-in-up delay-1" style="position: sticky; top: 64px; z-index: 100; background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); padding: 12px 0; border-radius: 16px; margin-bottom: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        <MudTextField Label="Ürün ara..."
                      @bind-Value="searchTerm"
                      OnKeyUp="HandleKeyDown"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="mx-auto"
                      Style="max-width:600px; background: white; border-radius: 12px;" />
    </div>

    <MudGrid Spacing="2" Class="fade-in-up delay-2">
        @foreach (var item in catalogList)
        {
            <MudItem xs="6" sm="4" md="3" Class="scale-in">
                <MudCard Class="modern-card hover-lift-smooth position-relative" 
                         Style="height: 100%; cursor: pointer; overflow: hidden;"
                         @onclick="() => OpenImageDialog(item.nStokID)">
                    <div style="position: relative; overflow: hidden; height: 200px; background: #f8f9fa;">
                        <MudCardMedia Image="@(!string.IsNullOrWhiteSpace(item.ImageUrl) ? item.ImageUrl : "/images/placeholder.png")" 
                                      Height="200" 
                                      Style="transition: transform 0.3s ease; object-fit: cover;" 
                                      Class="hover-scale" />
                        @if (item.lMevcut == 0)
                        {
                            <div style="position: absolute; top: 8px; right: 8px; background: #ff6b6b; color: white; padding: 4px 8px; border-radius: 8px; font-size: 0.75rem; font-weight: 600;">
                                Tükendi
                            </div>
                        }
                    </div>
                    <MudCardContent Style="padding: 12px;">
                        <MudText Style="height:40px;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;font-size:0.875rem;font-weight:500;color:#2c3e50;" 
                                 Typo="Typo.body2">
                            @item.sAciklama
                        </MudText>
                        <MudText Typo="Typo.h6" Style="color: #667eea; font-weight: 600; margin-top: 8px;">
                            ₺@item.lFiyat1.ToString("N2")
                        </MudText>
                        <div style="display: flex; gap: 8px; margin-top: 8px;">
                            <div class="badge-pill" style="@((item.lMevcut == 0) ? "background: #fee; color: #c53030;" : "background: #e0e7ff; color: #4c51bf;")">
                                <MudIcon Icon="@Icons.Material.Filled.Inventory2" Size="Size.Small" />
                                @item.lMevcut
                            </div>
                            <div class="badge-pill badge-info">
                                <MudIcon Icon="@Icons.Material.Filled.Widgets" Size="Size.Small" />
                                @item.nBirimCarpan
                            </div>
                        </div>
                    </MudCardContent>
                    <MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" Style="position: absolute; right: 12px; bottom: 12px;" OnClick="@(() => AddToCart(item))" />
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Indeterminate Color="Color.Primary" />
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="Severity.Error" Class="my-4">@message</MudAlert>
    }
</MudContainer>

@code {
    private List<Stock> catalogList = new();
    public List<Stock> AddedStock = new();
    private bool isLoading = false;
    private int pageSize = 20;
    private int currentPage = 1;
    private string searchTerm = "";

    private List<Stock> newItems = new();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMoreItems();
    }

    private async Task LoadMoreItems()
    {
        if (isLoading) return;
        isLoading = true;
        StateHasChanged();
        try
        {
            (newItems, message) = await StockService.GetCatalogItemsAsync(currentPage, pageSize, "", searchTerm);
            if (newItems?.Any() == true)
            {
                catalogList.AddRange(newItems);
                currentPage++;
            }
            else
            {
                message = "Daha fazla ürün bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            message = $"Hata: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnScrollReachedBottom()
    {
        await LoadMoreItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("attachScrollListener", DotNetObjectReference.Create(this));
        }
    }

    private void AddToCart(Stock stock)
    {
        try
        {
            if (CatalogService.TryAdd(stock))
            {
                Snackbar.Add("Ürün eklendi.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Bu ürün zaten sepetinizde.", Severity.Info);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Hata: {ex.Message}", Severity.Error);
        }
    }

    private void GoToOrders()
    {
        // Artık service zaten seçilenleri tutuyor,
        // tekrar eklemeye gerek yok.
        Navigation.NavigateTo("/newOrder?from=catalog");
    }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            catalogList.Clear();
            await LoadMoreItems();
        }
    }

    private async Task OpenImageDialog(string stokId)
    {
        var (items, msg) = await StockService.GetCatalogItemsAsync(1, 1, stokId, "");
        var product = items.FirstOrDefault();
        if (product is null) { message = "Ürün bulunamadı."; return; }

        var images = new List<string>();
        if (!string.IsNullOrWhiteSpace(product.ImageUrl))
            images.Add(product.ImageUrl);

        var parameters = new DialogParameters { ["Images"] = images };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        DialogService.Show<BusinessSmartMobile.Components.Custom_Components.ImageDialog>("Ürün Resimleri", parameters, options);
    }
}

<script>
    window.attachScrollListener = function (dotnetHelper) {
        let timeoutId;
        window.addEventListener('scroll', () => {
            if (timeoutId) clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 50) {
                    dotnetHelper.invokeMethodAsync('OnScrollReachedBottom');
                }
            }, 300);
        });
    };

    // Tamamla butonu sabit tut
    window.addEventListener('DOMContentLoaded', function() {
        const button = document.getElementById('tamamla-fixed-button');
        if (button) {
            button.style.position = 'fixed';
            button.style.right = '16px';
            button.style.top = '50vh';
            button.style.transform = 'translateY(-50%)';
            button.style.zIndex = '10000';
        }
    });
</script>

<style>
    .text-red {
        color: red !important;
    }

    .font-weight-bold {
        font-weight: bold !important;
    }

    /* Tamamla Butonu - Always Visible */
    .tamamla-button {
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        pointer-events: auto !important;
    }

    /* Pulse Animation for Button */
    @@keyframes pulse-ring {
        0% {
            box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
        }
        70% {
            box-shadow: 0 0 0 15px rgba(239, 68, 68, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
        }
    }

    .tamamla-button.pulse {
        animation: pulse-ring 2s infinite;
    }

    /* Fixed Button Container - Always on Top */
    #tamamla-fixed-button {
        position: fixed !important;
        right: 16px !important;
        top: 50vh !important;
        transform: translateY(-50%) !important;
        z-index: 10000 !important;
        display: block !important;
        pointer-events: auto !important;
    }
</style>

<!-- Tamamla Butonu - SAĞ ORTA SABİT (Viewport'a göre) -->
<div id="tamamla-fixed-button">
    <MudFab Color="Color.Error"
            Icon="@Icons.Material.Filled.ShoppingCart"
            Style="box-shadow: 0 8px 24px rgba(239, 68, 68, 0.6) !important; 
                   background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%) !important; 
                   width: 64px !important; 
                   height: 64px !important;
                   color: white !important;
                   position: relative !important;"
            Size="Size.Large"
            Class="tamamla-button pulse"
            aria-label="Siparişi Tamamla"
            OnClick="@(() => GoToOrders())" />
</div>
