@page "/salesRemaining"
@inject ReportsService ReportsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject AuthService _authService
@using System.Globalization;

@*<MudContainer Class="mx-0 mt-4">*@
@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}

@if (_error)
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}

<MudTable Class="mx-2"
          Breakpoint="Breakpoint.None"
          Items="list" Dense="true"
          Hover="true"
          SortLabel="Sort By"
          RowsPerPage="25"
          Striped="true"
          Bordered="true"
          FixedHeader="true"
          FixedFooter="true"
          Style="height:90vh;overflow-y:auto">
    <ToolBarContent>
        <div style="flex: 1;">
            <MudText Typo="Typo.h6">Satış Kalan Raporu</MudText>
        </div>

        <div>
            <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" @onclick="@(() => OpenFilterDialog())" aria-label="Filtre"></MudIconButton>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.sKodu)">Stok Kodu</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.sStokAciklama)">Stok Adı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.miktar)">Miktar</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.envanter)">Envanter</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.mevcut)">Mevcut</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.Bekleyen)">Bekleyen</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.NetMevcut)">Net Mevcut</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.siparis)">Sipariş</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.sonAlisTarihi)">Son Alış Tarihi</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.sonAlisMiktari)">Son Alış Miktarı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbSalesRemaining, object>(x=>x.satici)">Satıcı</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Stok Kodu">@context.sKodu</MudTd>
        <MudTd DataLabel="Stok Adı">@context.sStokAciklama</MudTd>
        <MudTd DataLabel="Miktar" Style="text-align:right">@context.miktar.ToString("N2")</MudTd>
        <MudTd DataLabel="Envanter" Style="text-align:right">@context.envanter.ToString("N2")</MudTd>
        <MudTd DataLabel="Mevcut" Style="text-align:right">@context.mevcut.ToString("N2")</MudTd>
        <MudTd DataLabel="Bekleyen" Style="text-align:right">@context.Bekleyen.ToString("N2")</MudTd>
        <MudTd DataLabel="Net Mevcut" Style="text-align:right">@context.NetMevcut.ToString("N2")</MudTd>
        <MudTd DataLabel="Sipariş" Style="text-align:right">@context.siparis.ToString("N2")</MudTd>
        <MudTd DataLabel="Son Alış Tarihi">
            @if (!string.IsNullOrEmpty(@context.sonAlisTarihi?.ToString()))
            {
                @context.sonAlisTarihi.ToString().Substring(0, 10);
            }
        </MudTd>
        <MudTd DataLabel="Son Alış Miktarı" Style="text-align:right">@context.sonAlisMiktari</MudTd>
        <MudTd DataLabel="Satıcı">@context.satici</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Gösterilecek Satır" />
    </PagerContent>
</MudTable>

@code {
    //private IEnumerable<TbFirma> Elements = Enumerable.Empty<TbFirma>();
    private List<TbSalesRemaining> list = new List<TbSalesRemaining>();
    private string apiMessage = string.Empty;

    private TbSalesRemaining filteredCheque = new TbSalesRemaining();
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "";
    static DateTime now = DateTime.Now;
    static DateTime firstDayOfMonth = new DateTime(now.Year, now.Month, 1);
    static DateTime lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
    string startDateStr = firstDayOfMonth.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture);
    string endDateStr = lastDayOfMonth.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture);
    static string magaza = "";

    protected override async Task OnInitializedAsync()
    {
        magaza = _authService.Auth.sDepo;
        LoadList(startDateStr, endDateStr, magaza);
    }





    private async Task OpenFilterDialog()
    {
        try
        {
            DateTime startDate = DateTime.ParseExact(startDateStr, "dd.MM.yyyy", CultureInfo.InvariantCulture);
            DateTime endDate = DateTime.ParseExact(endDateStr, "dd.MM.yyyy", CultureInfo.InvariantCulture);
            var parameters = new DialogParameters
            {
                ["FilterOptions"] = new ReportFilterOptions
                {
                    ShowVendor = false,
                    ShowStore = true,
                    ShowClass = false,
                    ShowWarehouse = false,
                    ShowType = false
                },
                ["Filter"] = new ReportFilters
                {
                    StartDate = startDate,
                    EndDate = endDate,
                    Store = magaza

                }

            };

            var dialog = DialogService.Show<BusinessSmartMobile.Components.Custom_Components.ReportFilter>("Filtrele", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                var filter = (ReportFilters)result.Data;
                DateTime resStartDate = filter.StartDate.Value;
                startDateStr = resStartDate.ToString("dd.MM.yyyy");
                DateTime resEndDate = filter.EndDate.Value;
                endDateStr = resEndDate.ToString("dd.MM.yyyy");
                magaza = filter.Store;
                LoadList(startDateStr, endDateStr, magaza);

            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
            StateHasChanged();
        }
    }



    private async void LoadList(string startDate, string endDate, string magaza)
    {

        try
        {
            (list, apiMessage) = await ReportsService.GetSalesRemainingReport(startDate, endDate, magaza);
            _loading = true;
            _error = false;

            if (!string.IsNullOrEmpty(apiMessage))
            {
                _error = true;
                _errorMessage = apiMessage;  // Hata mesajını buraya atıyoruz
            }
            else if (!list.Any())
            {
                _error = true;
                _errorMessage = "Girilen Filtreye Ait Veri Bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }

    }
}