@page "/bp"
@inject BusinessPartnerService BusinessPartnerService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthService _authService

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}

@if (_error)
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}

<MudTable Class="mx-2"
          Breakpoint="Breakpoint.None"
          Items="liste" Dense="true"
          Hover="true"
          SortLabel="Sort By"
          RowsPerPage="25"
          Striped="true"
          Bordered="true"
          FixedHeader="true"
          FixedFooter="true"
                    RowStyleFunc="RowStyleFunc"
          Style="height:90vh;overflow-y:auto">
    <ToolBarContent>
        <div style="flex: 1;">
            <MudText Typo="Typo.h6">Muhatap Listesi</MudText>
        </div>
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" @onclick="OpenFilterDialog" aria-label="Filtre"></MudIconButton>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>İşlemler</MudTh>
        <MudTh Style="display:none;"><MudTableSortLabel SortBy="new Func<TbFirma, object>(x => x.nFirmaId)">Firma Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbFirma, object>(x => x.sKodu)">Firma Kodu</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbFirma, object>(x => x.sAciklama)">Firma Adı</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbFirma, object>(x => x.sAdres1)">Adres</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbFirma, object>(x => x.lBakiye)">Bakiye</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TbFirma, object>(x => x.ToplamRisk)">Toplam Risk</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch" @onclick="@(() => OpenBalanceDialog(context.sKodu))"></MudIconButton>
        </MudTd>
        <MudTd Style="display:none;" DataLabel="Firma Id">@context.nFirmaId</MudTd>
        <MudTd DataLabel="Kodu">@context.sKodu</MudTd>
        <MudTd DataLabel="Firma Adı">@context.sAciklama</MudTd>
        <MudTd DataLabel="Adres">@(string.IsNullOrEmpty(context.sAdres1) ? "" : context.sAdres1 + " " + (string.IsNullOrEmpty(context.sAdres2) ? "" : context.sAdres2))</MudTd>
        <MudTd DataLabel="Bakiye">@context.lBakiye</MudTd>
        <MudTd DataLabel="Toplam Risk">@context.ToplamRisk</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Gösterilecek Satır" />
    </PagerContent>
</MudTable>

@code {
    private List<TbFirma> liste = new List<TbFirma>();
    private TbFirma filteredFirma = new TbFirma();
    private bool _loading = true;
    private bool _error = false;
    private string? _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        TbFirma tb = new TbFirma();
        await LoadList(tb);
    }
    private string RowStyleFunc(TbFirma arg1, int index)
    {
        return (Convert.ToDouble(arg1.ToplamRisk) < 0) ? "background-color:#ff6d6d" : "";

    }
    private async Task OpenFilterDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters { { "tbFirma", filteredFirma } };
        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.BusinessPartnersFilterDialog>("Filtrele", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            filteredFirma = (TbFirma)result.Data;
            await LoadList(filteredFirma);
        }
    }

    private async Task OpenBalanceDialog(string? sKodu)
    {
        if (string.IsNullOrEmpty(sKodu))
        {
            _error = true;
            _errorMessage = "Firma kodu bulunamadı.";
            StateHasChanged();
            return;
        }

        _loading = true;
        _error = false;
        StateHasChanged();

        try
        {
            var balance = await BusinessPartnerService.Balance(sKodu);
            if (balance == null || !balance.Any())
            {
                _error = true;
                _errorMessage = "Bakiye bilgileri alınamadı.";
                return;
            }

            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
            var parameters = new DialogParameters { { "balances", balance } };
            var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.BalanceDialog>("Cari Hareketler", parameters, options);
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
            Snackbar.Add("Bakiye yüklenirken bir hata oluştu.", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadList(TbFirma tbFirma)
    {
        _loading = true;
        _error = false;
        StateHasChanged();

        try
        {
            var firmaList = await BusinessPartnerService.GetBpList(
    sAciklama: tbFirma.sAciklama ?? "",
    sKodu: tbFirma.sKodu ?? "",
    sAdres1: tbFirma.sAdres1 ?? "",
    sSaticiRumuzu: _authService.Auth?.sSaticiRumuzu ?? ""
);


            liste = firmaList ?? new List<TbFirma>();

            if (!liste.Any())
            {
                _error = true;
                _errorMessage = "Veri alınamadı.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
            Snackbar.Add("Veriler yüklenirken bir hata oluştu.", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}