@page "/getPrice"
@inject StockService StockService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject BusinessPartnerService BusinessPartnerService
@inject AuthService _authService

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}
<MudContainer>
    <MudStack Spacing="1">
        <MudStack Row Spacing="2">
            <MudTextField @bind-Value="Barcode"
                          Label="Barkod okut"
                          Immediate="true"
                          @onkeyup="SearchBarcode"
                          Style="flex-grow: 1;" />
            <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner"
                           Color="Color.Primary"
                           OnClick="OpenBarcodeScanner" />
        </MudStack>

        <!-- Stok kodu, stok adı ve buton aynı satır -->
        <MudStack Row Spacing="2">
            <MudTextField @bind-Value="StokKodu"
                          Label="Stok Kodu"
                          Immediate="true" />
            <MudTextField @bind-Value="StokAdi"
                          Label="Stok Adı"
                          Immediate="true" />
        </MudStack>
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   OnClick="GetStock">
            Getir
        </MudButton>

        @if (stock != null)
        {
            <MudPaper Elevation="4" Class="pa-4 mt-4">
                <MudText Typo="Typo.h6">Stok Bilgileri</MudText>
                <MudTextField Label="Stok Adı" ReadOnly="true" FullWidth="true" @bind-Value="stock.sAciklama" />
                <MudTextField Label="Fiyat" ReadOnly="true" FullWidth="true" @bind-Value="stock.lFiyat1" />
                <MudTextField Label="Miktar" ReadOnly="true" FullWidth="true" @bind-Value="stock.lMevcut" />
            </MudPaper>
        }
    </MudStack>
</MudContainer>

@code {
    private string? barkod = "";
    private Stock? stock;
    private List<Stock> stocks = new List<Stock>();
    private bool _error = false;
    private string? _errorMessage = "";
    private string? StokKodu { get; set; }
    private string? StokAdi { get; set; }
    private string? Barcode { get; set; }
    private string? sFiyatTipi { get; set; }

    protected override async Task OnInitializedAsync()
    {
        sFiyatTipi = _authService.Auth?.sAktifFiyatTipi ?? "1"; // Varsayılan değer ekledim
    }

    private async Task SearchBarcode(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(Barcode))
        {
            var sDepo = _authService.Auth?.sDepo;
            if (sDepo == null) throw new Exception("Depo bilgisi bulunamadı.");
            (stock, _errorMessage) = await StockService.BarcodeRead(Barcode, sDepo, sFiyatTipi);
            if (stock == null && string.IsNullOrEmpty(_errorMessage))
            {
                _errorMessage = "Stok bilgisi alınamadı.";
            }
            StokKodu = string.Empty;
            StokAdi = string.Empty;
            Barcode = string.Empty;

            StateHasChanged();
        }
    }

    private async Task GetStock()
    {
        var sDepo = _authService.Auth?.sDepo;
        if (sDepo == null) throw new Exception("Depo bilgisi bulunamadı.");
        (stocks, _errorMessage) = await StockService.GetStocks(StokKodu, StokAdi, sFiyatTipi, sDepo, null, null, null, true);
        if (stocks?.Count == 1)
        {
            stock = stocks.FirstOrDefault();
            StokKodu = string.Empty;
            StokAdi = string.Empty;
            Barcode = string.Empty;
            StateHasChanged();
        }
        else if (stocks?.Count > 1)
        {
            await OpenChooseFromList();
        }
        else
        {
            _errorMessage = "Girilen Parametrelere Ait Bir Ürün Bulunamadı";
            StateHasChanged();
        }
    }

    private async Task OpenChooseFromList()
    {
        if (stocks == null) return;

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters { { "stockList", stocks } };
        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.ItemChooseFromList>("Ürünler", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Stock selectedStock)
        {
            stock = selectedStock;
            StokKodu = string.Empty;
            StokAdi = string.Empty;
            Barcode = string.Empty;
            StateHasChanged();
        }
    }

    private async Task OpenBarcodeScanner()
    {
        var barcodeScannerPage = new BusinessSmartMobile.Components.BarcodeReader.SingleBarcodeReaderComponent();

        await App.Current.MainPage.Navigation.PushModalAsync(barcodeScannerPage);

        string? barcode = await barcodeScannerPage.BarcodeResult;

        if (!string.IsNullOrWhiteSpace(barcode))
        {
            Barcode = barcode;
            var sDepo = _authService.Auth?.sDepo;
            if (sDepo == null) throw new Exception("Depo bilgisi bulunamadı.");
            (stock, _errorMessage) = await StockService.BarcodeRead(barcode, sDepo, sFiyatTipi);
            if (stock == null && string.IsNullOrEmpty(_errorMessage))
            {
                _errorMessage = "Stok bilgisi alınamadı.";
            }
            StateHasChanged();
        }
    }
}