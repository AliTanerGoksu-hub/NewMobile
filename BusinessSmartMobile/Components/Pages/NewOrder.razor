@page "/newOrder"
@inject OrderService OrderService
@inject BusinessPartnerService BusinessPartnerService
@inject StockService StockService
@inject CatalogService CatalogService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthService _authService
@using System.Linq


@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}
@if (_error)
{
    <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
}

<MudContainer>
    <MudButton Variant="Variant.Filled" FullWidth="true" Class="mt-2" Color="Color.Primary" @onclick="@(() => AddNewOrder())" aria-label="Siparişi Kaydet">Siparişi Kaydet</MudButton>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Sipariş Detay">
            <MudGrid Spacing="1">
                <MudTextField Class="d-none" @bind-Value="FirmaID" Label="Firma Id" />

                <MudItem xs="3" sm="3" md="3">
                    <MudTextField @bind-Value="FirmaKodu" Label="Kodu" />
                </MudItem>
                <MudItem xs="8" sm="8" md="8">
                    <MudTextField @bind-Value="FirmaAciklama" Label="Firma Adı" />
                </MudItem>
                <MudItem xs="1" sm="1" md="1">
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                   @onclick="@(() => OpenBpDialog())"
                                   aria-label="Cari Ekle" />
                </MudItem>

                <MudTextField Class="d-none" @bind-Value="StokID" Label="Stok ID" />
                <MudItem xs="3" sm="3" md="3">
                    <MudTextField @bind-Value="StokKodu" Label="Kodu" />
                </MudItem>
                <MudItem xs="8" sm="8" md="8">
                    <MudTextField @bind-Value="StokAdi" Label="Stok Adı" />
                </MudItem>
                <MudItem xs="1" sm="1" md="1">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="@(() => OpenStockDialog())" aria-label="Ürün Ekle"></MudIconButton>
                </MudItem>

                <MudItem xs="12" Class="d-flex align-center">
                    <MudTextField @bind-Value="Barcode"
                                  Label="Barkod"
                                  @onkeyup="SearchBarcode"
                                  Class="flex-grow-1" />
                    <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner"
                                   Color="Color.Primary"
                                   OnClick="OpenBarcodeScanner"
                                   Class="ml-2" />
                </MudItem>

                <MudNumericField T="double" @bind-Value="TopluIskonto" Label="Toplu İskonto %" Min="0" Max="100" />
                <MudItem xs="6">
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@DiscountAll">
                        <MudIcon Icon="@Icons.Material.Filled.Percent" />
                        Toplu İskonto
                    </MudButton>
                </MudItem>
                @if (showBackButton)
                {
                    <MudItem xs="6">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Tertiary"
                                   OnClick="GoBackToCatalog"
                                   StartIcon="@Icons.Material.Filled.ArrowBack">
                            Kataloğa Dön
                        </MudButton>
                    </MudItem>
                        }
                </MudGrid>
           <MudTable Items="SecilenUrunler" Hover="true" Striped="true">
    <HeaderContent>
        <MudTh>Ürün Adı</MudTh>
        <MudTh>Birim Fiyat</MudTh>
        <MudTh>Miktar</MudTh>
        <MudTh>Koli İçi</MudTh>
        <MudTh>İskonto Yüzde</MudTh>
        <MudTh>Birim Cinsi</MudTh>
        <MudTh>İşlemler</MudTh>
    </HeaderContent>
    <RowTemplate Context="urun">
        <MudTd>
            <MudText Class="font-weight-bold">@urun.Urun.sAciklama</MudText>
        </MudTd>
        <MudTd>
            <MudText Color="Color.Primary">@urun.Urun.lFiyat1 ₺</MudText>
        </MudTd>
        <MudTd>
            <MudNumericField T="double" @bind-Value="urun.Miktar" Min="1" Style="width: 100px;" Label="Miktar" />
        </MudTd>
        <MudTd>
            <MudText Typo="Typo.body2"><b>Koli İçi:</b> @urun.Urun.nBirimCarpan</MudText>
        </MudTd>
        <MudTd>
            <MudNumericField T="double" @bind-Value="urun.Urun.nIskontoYuzdesi" Min="0" Style="width: 110px;" Label="İskonto %" />
        </MudTd>
        <MudTd>
            <MudSelect T="string" @bind-Value="urun.SelectedBirimCinsi" Dense="true" Label="Birim">
                @foreach (var birim in urun.UnitList)
                {
                    <MudSelectItem T="string" Value="@birim.sBirimCinsi">@birim.sAciklama</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd>
            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => Sil(urun)">
                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                Sil
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>
        </MudTabPanel>
        <MudTabPanel Text="Adres">
            <MudGrid GutterSize="16px">
                <MudItem xs="12">
                    <MudTextField Label="Açıklama" @bind-Value="adres.sAciklama" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Adres 1" @bind-Value="adres.sAdres1" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Adres 2" @bind-Value="adres.sAdres2" />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField Label="İl" @bind-Value="adres.sIl" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Semt" @bind-Value="adres.sSemt" />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField Label="Ülke" @bind-Value="adres.sUlke" />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField Label="Posta Kodu" @bind-Value="adres.sPostaKodu" />
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Açıklamalar">
            <MudGrid GutterSize="16px">
                <MudItem xs="12">
                    <MudTextField Label="Vade" @bind-Value="siparisAciklama.sAciklama2" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Not" @bind-Value="siparisAciklama.sAciklama3" />
                </MudItem>


            </MudGrid>
        </MudTabPanel>
    </MudTabs>

    @if (BarkodListesiGorunsun)
    {
        <MudPaper Class="p-4 my-2" Style="border: 1px solid #ccc;">
            <MudText Typo="Typo.h6">Barkodla Eklenen Ürünler</MudText>

            <MudTable Items="BarkodGeciciListe" Dense="true">
                <HeaderContent>
                    <MudTh>Ürün</MudTh>
                    <MudTh>Miktar</MudTh>
                    <MudTh>Birim</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Urun.sAciklama</MudTd>
                    <MudTd>@context.Miktar</MudTd>
                    <MudTd>@context.SelectedBirimCinsi</MudTd>
                </RowTemplate>
            </MudTable>

            <div class="mt-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnaylaBarkodListesini">Onayla ve Aktar</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="@(() => BarkodListesiGorunsun = false)">İptal</MudButton>
            </div>
        </MudPaper>
    }


</MudContainer>

@code {
    private TbFirma? SelectedMusteri;
    private Stock? SelectedUrun;
    private int UrunMiktar = 1;
    private int pageSize = 20;
    private int currentPage = 1;
    private string apiMessage = string.Empty;
    private bool _loading = false;
    private string FirmaID { get; set; }
    private string FirmaKodu { get; set; }
    private string FiyatTipi { get; set; }
    private string FirmaAciklama { get; set; }
    private string sSaticiRumuzu { get; set; }
    private string sDepo { get; set; }
    private string StokKodu { get; set; }
    private string StokID { get; set; }
    private string StokAdi { get; set; }
    private string Barcode { get; set; }
    private List<UrunSecimi> SecilenUrunler = new();
    private List<TbFirma> firmaList = new List<TbFirma>();
    private List<Stock> stockList = new List<Stock>();
    private List<Stock> addedStockList = new List<Stock>();
    private List<TbStokBirimCinsi> unitList = new List<TbStokBirimCinsi>();
    private Stock stock = new Stock();
    private TbSiparisAciklamasi siparisAciklama = new TbSiparisAciklamasi();
    private TbFirmaAdresi adres = new TbFirmaAdresi();
    private bool _error = false;
    private string _errorMessage = "";
    private double TopluIskonto { get; set; } = 0;
    private List<Stock> BarkodlaEklenenUrunler = new();
    private bool barkodOkumaModu = false;
    private List<UrunSecimi> BarkodGeciciListe = new();
    private bool BarkodListesiGorunsun = false;
    private bool showBackButton;

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        showBackButton = query["from"] == "catalog";
        if (CatalogService.SelectedStocks?.Any() == true)
        {
            AddStockFromCatalog(CatalogService.SelectedStocks);
            CatalogService.SelectedStocks.Clear(); // listeyi boşalt istersen
        }
        //await LoadComponentValues();
        //try
        //{
        //    _loading = true;
        //    _error = false;

        //    if (!string.IsNullOrEmpty(_errorMessage))
        //    {
        //        _error = true;
        //    }
        //}
        //catch (Exception ex)
        //{
        //    _error = true;
        //    _errorMessage = $"Hata oluştu: {ex.Message}";
        //}
        //finally
        //{
        //    _loading = false;
        //    StateHasChanged();
        //}
    }
    private void GoBackToCatalog()
    {
        //CatalogService.SelectedStocks = SecilenUrunler.


        foreach (var stock in SecilenUrunler)
        {
            if (!CatalogService.SelectedStocks.Any(s => s.nStokID == stock.Urun.nStokID && s.sBarkod == stock.Urun.sBarkod))
            {
                CatalogService.SelectedStocks.Add(stock.Urun);
            }
        }

        Navigation.NavigateTo("/catalog");
    }
    private async Task Ekle()
    {
        if (SelectedUrun == null)
        {
            Snackbar.Add("Ürün bilgisi alınamadı, tekrar deneyin.", Severity.Error);
            return;
        }

        (unitList, apiMessage) = await StockService.GetUnits(SelectedUrun.nStokID, _authService.Auth?.sDepo, _authService.Auth?.sAktifFiyatTipi);
        if (!string.IsNullOrEmpty(apiMessage))
        {
            Snackbar.Add($"Birim bilgisi alınamadı: {apiMessage}", Severity.Error);
            return;
        }

        if (SecilenUrunler == null)
            SecilenUrunler = new List<UrunSecimi>();

        var mevcutUrun = SecilenUrunler.FirstOrDefault(x => x?.Urun != null && x.Urun.nStokID == SelectedUrun.nStokID);
        if (mevcutUrun != null)
        {
            mevcutUrun.Miktar += UrunMiktar;
        }
        else
        {
            double iskontoYuzdesi = 0;
            if (SelectedMusteri?.nOzelIskontosu > 0)
                iskontoYuzdesi = (double)(SelectedMusteri.nOzelIskontosu ?? 0);
            else if (SelectedUrun.nIskontoYuzdesi > 0)
                iskontoYuzdesi = SelectedUrun.nIskontoYuzdesi;

            SelectedUrun.nIskontoYuzdesi = iskontoYuzdesi;

            SecilenUrunler.Add(new UrunSecimi
            {
                Urun = SelectedUrun,
                Miktar = UrunMiktar,
                UnitList = unitList,
                SelectedBirimCinsi = unitList.FirstOrDefault(x => x.sBirimCinsi == SelectedUrun.sBirimCinsi2)?.sBirimCinsi

            });
        }

        Barcode = string.Empty;
        StokAdi = string.Empty;
        StokKodu = string.Empty;
        StokID = string.Empty;
        SelectedUrun = null;
    }

    private async Task<bool> LoadComponentValues()
    {
        var tasks = new List<Func<Task<bool>>>
{
            async () => await GetData(() => OrderService.GetOrderBusinessPartners("", _authService.Auth?.sSaticiRumuzu), data => firmaList = data),
            async () => await GetData(() => OrderService.GetOrderStocks(currentPage, pageSize,""), data => stockList = data),
        };

        foreach (var task in tasks)
        {
            if (!await task())
            {
                return false;
            }
        }

        return true;
    }

    private async void OpenBarcodeScanner()
    {
        try
        {
            if (Navigation == null)
            {
                _error = true;
                _errorMessage = "Navigasyon null, barkod tarayıcı açılamadı.";
                StateHasChanged();
                return;
            }
            Console.WriteLine("iOS: Barkod tarayıcı bileşeni oluşturuluyor...");
            var barcodeScannerPage = new BusinessSmartMobile.Components.BarcodeReader.BarcodeReaderComponent();
            bool isReading = false;

            barcodeScannerPage.OnBarcodeDetected += async (s, barkod) =>
            {
                if (isReading) return;
                isReading = true;
                barkod = barkod.Replace("\r", "").Replace("\n", "").Trim();
                barcodeScannerPage.ShowMessage($"Barkod okundu: {barkod}");
                (var stock, _errorMessage) = await StockService.BarcodeRead(barkod, _authService.Auth?.sDepo, _authService.Auth?.sAktifFiyatTipi);
                if (string.IsNullOrEmpty(_errorMessage) && stock != null)
                {
                    var urun = BarkodGeciciListe.FirstOrDefault(x => x.Urun.nStokID == stock.nStokID);
                    if (urun != null) urun.Miktar++;
                    else
                    {
                        (var birimler, _) = await StockService.GetUnits(stock.nStokID);
                        BarkodGeciciListe.Add(new UrunSecimi { Urun = stock, Miktar = 1, UnitList = birimler, SelectedBirimCinsi = birimler.FirstOrDefault()?.sBirimCinsi });
                    }
                    BarkodListesiGorunsun = true;
                }
                else
                {
                    barcodeScannerPage.ShowMessage($"Ürün bulunamadı: {barkod}");
                }
                StateHasChanged();
                await Task.Delay(2000);
                isReading = false;
            };

            barcodeScannerPage.Disappearing += async (s, e) =>
            {
                if (BarkodGeciciListe.Count > 0)
                    await BarkoddanEklenenleriOnayaSun();
            };

            Console.WriteLine("iOS: Barkod tarayıcı modal açılıyor...");
            await Application.Current.MainPage.Navigation.PushModalAsync(barcodeScannerPage, true);
            Console.WriteLine("iOS: Barkod tarayıcı modal açıldı.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"iOS Hata: {ex.Message} - StackTrace: {ex.StackTrace}");
            _error = true;
            _errorMessage = $"Barkod tarayıcı açılırken hata: {ex.Message}";
            StateHasChanged();
        }
    }

    private void OnaylaBarkodListesini()
    {
        foreach (var urun in BarkodGeciciListe)
        {
            var mevcut = SecilenUrunler.FirstOrDefault(x => x.Urun.nStokID == urun.Urun.nStokID);
            if (mevcut != null)
                mevcut.Miktar += urun.Miktar;
            else
                SecilenUrunler.Add(urun);
        }
        BarkodGeciciListe.Clear();
        BarkodListesiGorunsun = false;
        Snackbar.Add("Ürünler siparişe aktarıldı.", Severity.Success);
    }

    private async Task BarkoddanEklenenleriOnayaSun()
    {
        if (BarkodGeciciListe.Count == 0)
            return;

        var parameters = new DialogParameters
        {
            ["GeciciListe"] = BarkodGeciciListe
        };

        var dialog = DialogService.Show<BarkodListeOnayPopup>("Barkodla Eklenen Ürünler", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is List<UrunSecimi> aktarilacaklar)
        {
            foreach (var urun in aktarilacaklar)
            {
                var mevcut = SecilenUrunler.FirstOrDefault(x => x.Urun.nStokID == urun.Urun.nStokID);
                if (mevcut != null)
                    mevcut.Miktar += urun.Miktar;
                else
                    SecilenUrunler.Add(urun);
            }
            BarkodGeciciListe.Clear();
            Snackbar.Add("Ürünler siparişe aktarıldı.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Ürün aktarımı iptal edildi.", Severity.Info);
        }
    }

    private async Task SearchBarcode(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(FirmaKodu))
            {
                (stock, _errorMessage) = await StockService.BarcodeRead(Barcode, _authService.Auth?.sDepo, _authService.Auth?.sAktifFiyatTipi);
                StateHasChanged();
                await Ekle();
            }
            else
            {
                _error = true;
                _errorMessage = "Lütfen Önce Firma Seçiniz.";
                StateHasChanged();
            }
        }
    }

    private async Task<bool> GetData<T>(Func<Task<(T, string)>> fetchData, Action<T> setData)
    {
        try
        {
            var (result, message) = await fetchData();

            if (!string.IsNullOrEmpty(message))
            {
                _error = true;
                _errorMessage = message;
                return false;
            }

            setData(result);
            return true;
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Hata oluştu: {ex.Message}";
            return false;
        }
    }

    private async Task OpenBpDialog()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullScreen = true,
            FullWidth = true,
            MaxWidth = MaxWidth.False
        };

        var parameters = new DialogParameters
{
            { "Musteriler", firmaList.Where(f => f.sSaticiRumuzu == _authService.Auth?.sSaticiRumuzu || f.sSaticiRumuzu == "").ToList() }

        };

        if (SelectedMusteri != null)
        {
            parameters.Add("SeciliFirma", SelectedMusteri);
        }

        var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.SelectBPDialog>(
            "Filtrele", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            SelectedMusteri = (TbFirma)result.Data;
            if (SelectedMusteri.sSaticiRumuzu != _authService.Auth?.sSaticiRumuzu && SelectedMusteri.sSaticiRumuzu != "")
            {
                _error = true;
                _errorMessage = "Seçilen firmanın satıcı rumuzu kullanıcının satıcı rumuzu ile uyuşmuyor.";
                StateHasChanged();
                return;
            }

            FiyatTipi = SelectedMusteri.sFiyatTipi?.Trim();
            if (string.IsNullOrEmpty(FiyatTipi))
            {
                FiyatTipi = await BusinessPartnerService.APersonelFiyatTipi("Admin");
            }
            FirmaKodu = SelectedMusteri.sKodu;
            FirmaID = SelectedMusteri.nFirmaId;
            FirmaAciklama = SelectedMusteri.sAciklama;
            sSaticiRumuzu = SelectedMusteri.sSaticiRumuzu;
            sDepo = _authService.Auth?.sDepo ?? "";
            adres = new()
            {
                nFirmaID = Convert.ToInt32(SelectedMusteri.nFirmaId),
                sAciklama = SelectedMusteri.sAciklama,
                //MÜŞTERİ TALEBİ ÜZERİNE CARİ SEÇİMİ SONRASINDA OTOMATİK GELEN ADRES BİLGİLERİ 30.08.2025 TARİHİNDE İMRAN TARAFINDAN KAPATILMIŞTIR
                //sAdres1 = SelectedMusteri.sAdres1,
                //sAdres2 = SelectedMusteri.sAdres2,
                //sIl = SelectedMusteri.sIl,
                //sSemt = SelectedMusteri.sSemt,
                //sPostaKodu = SelectedMusteri.sPostaKodu,
                //sUlke = SelectedMusteri.sUlke,
                //sVergiDairesi = SelectedMusteri.sVergiDairesi,
                //sVergiNo = SelectedMusteri.sVergiNo
            };
            //(adres, _errorMessage) = await BusinessPartnerService.GetTbFirmaAdresi(FirmaID);
            StateHasChanged();
        }
    }

    private async Task OpenStockDialog()
    {
        if (!string.IsNullOrEmpty(FirmaKodu))
        {
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
            var parameters = new DialogParameters { { "FilteredStock", stockList }, { "sFiyatTipi", FiyatTipi }, { "AddedStock", addedStockList } };
            var dialog = await DialogService.ShowAsync<BusinessSmartMobile.Components.Custom_Components.SelectItemDialog>("Filtrele", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                addedStockList = (List<Stock>)result.Data;
                OrganizeList(addedStockList);
            }
        }
        else
        {
            _error = true;
            _errorMessage = "Lütfen Önce Firma Seçiniz.";
            StateHasChanged();
        }
    }
    public void AddStockFromCatalog(List<Stock> stockList)
    {
        try
        {
            addedStockList = stockList;
            OrganizeList(addedStockList);

        }
        catch (Exception ex)
        {

        }
    }
    private async void OrganizeList(List<Stock> stockList)
    {
        foreach (var stock in stockList.ToList())
        {
            stock.nStokID = stock.nStokID?.ToString();
            var existing = SecilenUrunler.FirstOrDefault(x =>
                x.Urun.nStokID == stock.nStokID &&
                x.Urun.sBarkod == stock.sBarkod);

            if (existing != null)
            {
                existing.Miktar += 1;
            }
            else
            {
                if (_authService.Auth == null)
                {
                    apiMessage = "Kullanıcı giriş yapmamış.";
                    return;
                }

                (unitList, apiMessage) = await StockService.GetUnits(
                    stock.nStokID,
                    _authService.Auth.sDepo,
                    _authService.Auth.sAktifFiyatTipi);

                if (string.IsNullOrEmpty(apiMessage))
                {
                    SecilenUrunler.Add(new UrunSecimi
                    {
                        Urun = stock,
                        Miktar = 1,
                        UnitList = unitList,
                        SelectedBirimCinsi = unitList.FirstOrDefault()?.sBirimCinsi
                    });
                }
            }
        }
        StateHasChanged();
    }

    private async Task AddNewOrder()
    {
        if (!string.IsNullOrEmpty(FirmaID))
        {
            if (SecilenUrunler.Count() != 0)
            {
                if (_authService.Auth == null)
                {
                    _error = true;
                    _errorMessage = "Kullanıcı giriş yapmamış.";
                    StateHasChanged();
                    return;
                }

                var sonuc = await OrderService.AddOrder(FirmaID, SecilenUrunler, FiyatTipi, sSaticiRumuzu, _authService.Auth.PERSONELADI, _authService.Auth.sDepo, adres, siparisAciklama);
                Console.WriteLine(sonuc);
                if (sonuc == "OK")
                {
                    Navigation.NavigateTo("/orders");
                }
                else
                {
                    _error = true;
                    _errorMessage = sonuc;
                    StateHasChanged();
                }
            }
            else
            {
                _error = true;
                _errorMessage = "Sipariş Kalemleri Boş Olamaz.";
                StateHasChanged();
            }
        }
        else
        {
            _error = true;
            _errorMessage = "Firma Seçmeden Sipariş Kaydedilemez.";
            StateHasChanged();
        }
    }

    private void Sil(UrunSecimi urun)
    {
        SecilenUrunler.Remove(urun);
        Snackbar.Add("Ürün Kaldırıldı.", Severity.Error);
    }

    private void DiscountAll()
    {
        foreach (var item in SecilenUrunler)
        {
            item.Urun.nIskontoYuzdesi = TopluIskonto;
        }

        Snackbar.Add($"Tüm ürünlere %{TopluIskonto} iskonto uygulandı.", Severity.Success);
    }
}